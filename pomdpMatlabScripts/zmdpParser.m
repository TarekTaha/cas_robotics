function [maxValue action] = zmdpParser(filename,belief)
%  eg. [maxValue action] = zmdpParse(filename,belief)
% 
% filename: is the name of the file output generated by zmdpSolver usually
% out.policy. 
% belief  : a (1,n) vector with the probability belief of states where n is
% the number of states in the POMDP model. 

file = textread(filename,'%s','delimiter','\n','whitespace',' \b\t','bufsize',8000000);

% remove comments and empty lines (if they exist)
k=0;
for i=1:length(file)
  comment=strfind(file{i},'#');
  if ~isempty(comment)
    file{i}(comment(1):end)=[];
  end
  if ~isempty(file{i})
    k=k+1;
    fileTemp{k}=file{i};
  end
%   if (mod(i,1000)==0)
%       display(i);
%   end
end
clear file;

% remove un-necessary info
k=0;
for i=1:length(fileTemp)
  leftCurlyBracket =strfind(fileTemp{i},'{');
  rightCurlyBracket=strfind(fileTemp{i},'}');
  leftBracket =strfind(fileTemp{i},'[');
  rightBracket=strfind(fileTemp{i},']'); 
  policy = strfind(fileTemp{i},'policyType');
  planes = strfind(fileTemp{i},'planes');
  entries = strfind(fileTemp{i},'entries');
  if isempty(leftCurlyBracket) && isempty(rightCurlyBracket) && isempty(leftBracket) && isempty(rightBracket) && isempty(planes) && isempty(policy)&& isempty(entries)
    k=k+1;
    file{k}=fileTemp{i};
  end
end
clear fileTemp;

for i=1:length(file)
  % remove right Arrows
  rightArrow =strfind(file{i},'=>');
  if ~isempty(rightArrow)
      file{i}(rightArrow(1):rightArrow(1)+1)=[];
  end 
  % remove the commas
  comma =strfind(file{i},',');
  s = length(comma);
  if ~isempty(comma)
      for j=0:(length(comma)-1)
          file{i}((comma(j+1)-j):(comma(j+1)-j))=[];
      end
  end
end

nrLines=length(file);
k=1;
[numPlanes] = sscanf(file{k},'%*s %d');
k=k+1;
for i=1:numPlanes
    planeActions(i) = sscanf(file{k},'%*s %d');
    k=k+1;
    [numEntries] = sscanf(file{k},'%*s %d');
    k=k+1;
    for j=1:numEntries
        x = sscanf(file{k},'%d %f');
        planeEntries{i,(x(1)+1)} = x(2);
        k=k+1;
    end
end

numBeliefs = length(belief);
expectedReward = zeros(1,numPlanes);
for i=1:numPlanes
    for j=1:numBeliefs
        % check if this vector is missing the relevant information
        if isempty(planeEntries{i,j}) && belief(j)~=0
            % large negative number to insure that this vector will not be
            % picked up later
            expectedReward(i) = - 10000; 
            break;
        else
            if ~isempty(planeEntries{i,j})
                expectedReward(i) = expectedReward(i) + belief(j)*planeEntries{i,j};
            end
        end
    end
end

[maxValue,index]  = max(expectedReward);
action = planeActions(index) + 1; % Actions in the output Policy start from 0
end
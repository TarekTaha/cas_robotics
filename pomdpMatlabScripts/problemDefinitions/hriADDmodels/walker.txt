// Walker Example:
// Patient is sitting backward initially
// The walker is put in front of him (probably he can call the walker to autonomously come to him)
// The patient uses the walker to stand forward: for that to happen the walker should be in the right 
// position and the readings from  one of the proximity sensors should be on (body of patient detected
// by the sensor).
// The user holds the handles and stands forward.
// The user then directs the walker and walks through out the environment assited by the walker (patient should be
// holding both handles and the user should be close to the walker.
// Patient returns to initial location
// Patient sits backward with the help of the walker.

(variables 
	(task stand sit movearound)		  	 		// task: task to be performed
	(intention right left forward backward sit stand nothing) 	// I   : immediate action intention
	(satisfaction frustrated cautious happy ) 	 		// Sat : user's satisfaction
	(status reliant struggeling competent)    	 		// Stat: user's status
)	
// observations
(observations	(lsg	non medium high neg)	// left strain gauges
		(rsg	non medium high neg)	// right strain gauges
		(uir	close far)	 	// upper infra red
		(lir	close far)	 	// lower infra red					
)
// initial belief is a product of marginal beliefs

init [*	(task		(stand	(0.8))	(sit	(0.1))	(movearound	(0.1)))
	(intention	(forward (0.2))	(backward (0.2)) (Right (0.2)) (Left	(0.2)) (Nothing	(0.2)))
	(satisfaction	(happy	(0.33))	(cautious	(0.34))	(frustrated	(0.33)))
	(status		(competent	(0.33))	(struggeling	(0.34))	(reliant	(0.33)))
     ]
   
// some CPTS may be unnormalized - 
// this means all CPTs will be automatically normalized when read in
unnormalised


dd defaultIntention
	(lsg'	(non	(rsg'	(non	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(1.0))))
				(medium (intention'	(right(0.8) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
				(high 	(intention'	(right(0.9) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.1))))
				(neg	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(1.0))))
			)
		)
		(medium	(rsg'	(non	(intention'	(right(0.0) left(0.8) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
				(medium (intention'	(right(0.0) left(0.0) forward(0.8) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
				(high 	(intention'	(right(0.6) left(0.0) forward(0.4) backward(0.0) sit(0.0) stand(0.0) nothing(0.0))))
				(neg	(intention'	(right(0.0) left(0.8) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
			)
		)
		(high	(rsg'	(non	(intention'	(right(0.0) left(0.9) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.1))))
				(medium (intention'	(right(0.8) left(0.6) forward(0.4) backward(0.0) sit(0.0) stand(0.0) nothing(0.0))))
				(high 	(intention'	(right(0.0) left(0.0) forward(0.8) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
				(neg	(intention'	(right(0.0) left(0.8) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.2))))
			)
		)
		(neg	(rsg'	(non	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(1.0))))
				(medium (intention'	(right(0.4) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.6))))
				(high 	(intention'	(right(0.9) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(0.1))))
				(neg	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.9) sit(0.0) stand(0.0) nothing(0.1))))
			)
		)
	)
enddd

dd defaulprox
	(uir	(close	(lir	(close	(intention'	(right(0.1667) left(0.1667) forward(0.1667) backward(0.1667) sit(0.1667) stand(0.0) nothing(0.1667))))
				(far 	(intention'	(right(0.1429) left(0.1429) forward(0.1429) backward(0.1429) sit(0.1429) stand(0.1429) nothing(0.1429))))
			)
		)
		(far	(lir	(close	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(1.0) nothing(0.0))))
				(far 	(intention'	(right(0.0) left(0.0) forward(0.0) backward(0.0) sit(0.0) stand(0.0) nothing(1.0))))
			)
		)
	)
enddd

dd correctIntention
	[+ (defaulprox)(defaultIntention)]
enddd

// dynamics of the satisfaction level
dd defaultsat
	(satisfaction	(happy 		(satisfaction'	(happy	(0.9)) (cautious	(0.1)) (frustrated	(0.0))))
			(cautious	(satisfaction'	(happy	(0.1)) (cautious	(0.8)) (frustrated	(0.1))))
			(frustrated	(satisfaction'	(happy	(0.0)) (cautious	(0.1)) (frustrated	(0.9))))
	)
enddd

// The system can perform 5 actions: move right, move left, move forward, move backward, and lock in place
// Actions performed like standing up and sitting down are assited by the system through locking in place
// and making sure that the user is close enough to the user.

action nothing
	task		( )
	intention	(SAMEintention)
	satisfaction	(intention 	(right	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(left	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(forward 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(backward	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(sit	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(stand	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(nothing 	(satisfaction' (happy	(1.0)) (cautious	(0.0)) (frustrated	(0.0))) )					
			)
	status		(SAMEstatus)
	loc		(moveNorth)
	observe
		lsg	
		rsg
		uir
		lir
	endobserve
endaction

action forward
	task		(taskmovearound)
	intention	(SAMEintention)
	satisfaction	(intention 	(right	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(left	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(forward 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(backward	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(sit	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(stand	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(nothing 	(satisfaction' (happy	(1.0)) (cautious	(0.0)) (frustrated	(0.0))) )					
			)
	status		(SAMEstatus)
	loc		(moveNorth)
	observe
		lsg	
		rsg
		uir
		lir
	endobserve
endaction

action backward
	task		(taskmovearound)
	intention	(SAMEintention)
	satisfaction	(intention 	(right	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(left	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(forward 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(backward	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(sit	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(stand	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(nothing 	(satisfaction' (happy	(1.0)) (cautious	(0.0)) (frustrated	(0.0))) )					
			)
	status		(SAMEstatus)
	loc		(moveNorth)
	observe
		lsg	
		rsg
		uir
		lir
	endobserve
endaction

action right
	task		(taskmovearound)
	intention	(SAMEintention)
	satisfaction	(intention 	(right	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(left	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(forward 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(backward	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(sit	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(stand	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(nothing 	(satisfaction' (happy	(1.0)) (cautious	(0.0)) (frustrated	(0.0))) )					
			)
	status		(SAMEstatus)
	loc		(moveNorth)
	observe
		lsg	
		rsg
		uir
		lir
	endobserve
endaction

action left
	task		(taskmovearound)
	intention	(SAMEintention)
	satisfaction	(intention 	(right	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(left	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(forward 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(backward	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(sit	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(stand	 	(satisfaction' (happy	(0.0)) (cautious	(0.2)) (frustrated	(0.8))) )
					(nothing 	(satisfaction' (happy	(1.0)) (cautious	(0.0)) (frustrated	(0.0))) )					
			)
	status		(SAMEstatus)
	loc		(moveNorth)
	observe
		lsg	
		rsg
		uir
		lir
	endobserve
endaction

reward [+  (huc	(yes	(5.0))
		(no	(0.0)))
	   (w	(drenched (-3.0))
		(sprinkled (-1.1))
		(dry	(0.0)))]
discount 0.9
tolerance 0.001
